package it.crem.db.mng;

import it.crem.common.Utility;
import it.crem.db.BaseObject;
import it.crem.db.InitSessionFactory;
import it.crem.db.conf.Partecipanti;
import it.crem.db.conf.Periodi;
import it.crem.db.conf.Presenze;
import it.crem.db.conf.Ragazzi;
import it.crem.db.conf.Tipologie;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

import com.jcraft.jsch.Session;

import java.util.Calendar;

public class DbMngExt extends DbMng {

	public Periodi getPeriodo(Date date){
		Periodi p = null;
		//Date now = Calendar.getInstance().getTime();
		List<Object> l = null;
		session = InitSessionFactory.getInstance().getCurrentSession();
		Transaction transaction = null;
		
			
		try{
			transaction = session.beginTransaction();
			Criteria c = session.createCriteria(Periodi.class);
			c.add(Restrictions.and(Restrictions.le("inizio", date),Restrictions.ge("fine", date) ));
			p = (Periodi)c.uniqueResult();
		
		}
		catch(Exception E){
			E.printStackTrace();
		}
		return p;
	}
	
	
	public Presenze getPresenza(Ragazzi r, Date giorno){
		Presenze p= null;
		session = InitSessionFactory.getInstance().getCurrentSession();
		Transaction transaction = null;
		String s = Utility.getFormattedData(giorno);
		String s0 = s + " 00:00:00";
		String s1 = s + " 23:59:59";	
		try{
			transaction = session.beginTransaction();
			Date d0 = Utility.getFullDate(s0);
			Date d1 = Utility.getFullDate(s1);
			Criteria c = session.createCriteria(Presenze.class);
			c.add(Restrictions.between("giorno", d0,d1));
			c.add(Restrictions.eq("ragazzi", r));
			p = (Presenze)c.uniqueResult();
		}
		catch (Exception E){
			E.printStackTrace();
		}
		return p;
	}
	public ArrayList<Presenze> getPresenze(Date d){
		ArrayList<Presenze> list = null;
		session = InitSessionFactory.getInstance().getCurrentSession();
		Transaction transaction = null;
		String s = Utility.getFormattedData(d);
		String s0 = s + " 00:00:00";
		String s1 = s + " 23:59:59";	
		
		try{
			transaction = session.beginTransaction();
			Date d0 = Utility.getFullDate(s0);
			Date d1 = Utility.getFullDate(s1);
			Criteria c = session.createCriteria(Presenze.class);
			c.add(Restrictions.between("giorno", d0,d1));
			//String hsql = "from Presenze as P where to_char(giorno,'YYYYMMDD')=?";
			//Query query = session.createQuery(hsql);
			//query.setParameter(0, date);
			List mylist = c.list();
			if (mylist!=null){
				list = new ArrayList<Presenze>();
				for (int i=0;i<mylist.size();i++){
					list.add((Presenze)mylist.get(i));
				}
			}
		
		}
		catch(Exception E){
			E.printStackTrace();
		}
		return list;
	}
	
	public Presenze getPresenzaRagazzo(Date d, Ragazzi ragazzo){
		Presenze p = null;;
		session = InitSessionFactory.getInstance().getCurrentSession();
		Transaction transaction = null;
		String s = Utility.getFormattedData(d);
		String s0 = s + " 00:00:00";
		String s1 = s + " 23:59:59";	
		
		try{
			transaction = session.beginTransaction();
			Date d0 = Utility.getFullDate(s0);
			Date d1 = Utility.getFullDate(s1);
			Criteria c = session.createCriteria(Presenze.class);
			c.add(Restrictions.between("giorno", d0,d1));
			c.add(Restrictions.eq("ragazzi",ragazzo));
			//String hsql = "from Presenze as P where to_char(giorno,'YYYYMMDD')=?";
			//Query query = session.createQuery(hsql);
			//query.setParameter(0, date);
			p = (Presenze)c.uniqueResult();
			
			
		}
		catch(Exception E){
			E.printStackTrace();
		}
		return p;
	}
	
	public List<Object> getPresenzePeriodo(Ragazzi ragazzo,Periodi periodo ){
		List<Object> list = null;
		session = InitSessionFactory.getInstance().getCurrentSession();
		Transaction transaction = null;
		try{
			transaction = session.beginTransaction();
			Criteria c = session.createCriteria(Presenze.class);
			c.add(Restrictions.eq("ragazzi", ragazzo));
			c.add(Restrictions.between("giorno", periodo.getInizio(), periodo.getFine()));
			c.add(Restrictions.eq("presente",true));
			list = c.list();
		}
		catch (Exception E){
			E.printStackTrace();
		}
		return list;
	}
	
	
	
	
	
	public Tipologie getTipologia(String tipo, Integer np, Boolean fd, Boolean fam ){
		Tipologie t = null;
		session = InitSessionFactory.getInstance().getCurrentSession();
		Transaction transaction = null;
		try{
			transaction = session.beginTransaction();
			Criteria c = session.createCriteria(Tipologie.class);
			
			c.add(Restrictions.eq("tipo",tipo) );
			c.add(Restrictions.eq("numSettimane",np) );
			c.add(Restrictions.eq("fullDay",fd) );
			c.add(Restrictions.eq("familiare",fam) );
			
			t = (Tipologie)c.uniqueResult();
			
		}
		catch(Exception E){
			E.printStackTrace();
		}
		
		return t;
	}
	
	public ArrayList<Ragazzi> getIscritti(Date date){
		ArrayList<Ragazzi> ragazzi = null;
		//Date now = Calendar.getInstance().getTime();
		List<Object> l = null;
		session = InitSessionFactory.getInstance().getCurrentSession();
		Transaction transaction = null;
		
			
		try{
			Periodi p = this.getPeriodo(date);
			if (p!=null){
			transaction = session.beginTransaction();
			Criteria c = session.createCriteria(Partecipanti.class, "part");
			c.createAlias("part.periodi", "per");
			c.add(Restrictions.eq("periodi", p) );
			// il seguito aggiunto per ordinamento
			c.createAlias("part.ragazzi", "rag");
			c.addOrder(Order.asc("rag.cognome"));
			// fine ordinamento
			//c.add(Restrictions.eq("part.stato", true));
			List list = c.list();
			if (list!=null){
				ragazzi = new ArrayList<Ragazzi>();
				for (int i=0;i<list.size();i++){
					Partecipanti pt = (Partecipanti)list.get(i);
					if (pt.getStato())
						ragazzi.add(pt.getRagazzi());
					else
						logger.debug(  pt.getRagazzi().getNome()+ " - "+ pt.getRagazzi().getCognome()+"   " + pt.getRagazzi().getOid()+"  questo non lo aggiungo causa stato");
				}
			}
			}else{
				logger.debug(  "Periodo non trovato");
			}
		
		}
		catch(Exception E){
			E.printStackTrace();
		}
		return ragazzi;
	}
		
	
	public Integer getLastNumeroPagamento(){
		Integer num = 0;
		session = InitSessionFactory.getInstance().getCurrentSession();
		Transaction transaction = null;
		
			
		try{
			transaction = session.beginTransaction();
			String query = "select max(numero) from Pagamenti";
			SQLQuery sq = session.createSQLQuery(query);
			//c.add(Restrictions.eq("part.stato", true));
			num = (Integer)sq.uniqueResult();
			if (num==null)
				num=0;
		}
		catch(Exception E){
			E.printStackTrace();
		}
		
		
		return num;
	}
	
	
	public boolean  verificaRagazzo(String nome, String cognome, String citta, Date data){
		Boolean ok = true;
		session = InitSessionFactory.getInstance().getCurrentSession();
		Transaction transaction = null;
		
			
		try{
			String sd = Utility.getFormattedData(data);
			Date start = Utility.getFullDate(sd + " 00:00:00");
			Date end = Utility.getFullDate(sd + " 23:59:59");
			transaction = session.beginTransaction();
			Criteria c = session.createCriteria(Ragazzi.class, "isc");
			//c.createAlias("part.periodi", "per");
			c.add(Restrictions.eq("nome", nome) );
			c.add(Restrictions.eq("cognome", cognome) );
			c.add(Restrictions.eq("cittaNascita", citta) );
			c.add(Restrictions.ge("dataNascita", start));
			c.add(Restrictions.le("dataNascita", end));
			//c.add(Restrictions.eq("dataNascita", data));
			List list = c.list();
			ok = ((list==null)||(list.size()==0));
			
		}
		catch (Exception E){
			E.printStackTrace();
		}
		return ok;
	}
	public static void main(String[] args){
		String d = "30/06/2008";
		Date data = Utility.getDate(d);
		String nome = "Paolo";
		String cognome = "Il Tarallo";
		String citta = "Pisa";
		DbMngExt db = new DbMngExt();
		Boolean ok = db.verificaRagazzo(nome, cognome, citta, data);
		System.out.println("esito= " +ok);
	//	Ragazzi r  = (Ragazzi)db.getObject(21, "Ragazzi");
		/*
		Tipologie t = db.getTipologia("S", 2, true, false);
		if (t!=null){
			System.out.println("rgazzo " + t.getForma());
		}else{
			System.out.println("NULLA");
		}
		*/
		/*
		if (p!=null){
			System.out.println("lista " + p.size());
			for (int i = 0;i<p.size();i++){
				Ragazzi r = (Ragazzi)p.get(i);
				System.out.println("rgazzo " + r.getNome()+"-"+r.getCognome()+"   "+ r.getOid());
			}
		}
		 
		else
			System.out.println("lista NULL");
			*/
	}
	
}
